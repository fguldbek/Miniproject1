@page "/CreatePost"
@using Core;
@inject HttpClient Http;
@inject NavigationManager navigationManager



<h1 class="mb-3 mt-3">Shopping List</h1>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Amount</th>
            <th>Price</th>
            <th>Done</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in shoppingList ?? new Order[0])
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Price</td>

            </tr>
        }

    </tbody>
</table>

<h2>Add ...</h2>

<EditForm Model="@shoppingItem" class="row p-3" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-md-12 mb-3">
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="shoppingItem.Name" class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="Price">Price</label>
        <InputNumber id="Price" @bind-Value="shoppingItem.Price" class="form-control" />
    </div>


    <div class="col-md-12 mb-3">
        <label for="Description">Description</label>
        <InputTextArea id="Description" @bind-Value="shoppingItem.Description" class="form-control" />
    </div>
    <div class="col-12 mb-3">
        <button type="submit" class="btn btn-primary">Add</button>
    </div>
</EditForm>


@code {

    // Objekt for formen der vises modal
    private Order shoppingItem = new();

    // container for listen
    private Order[]? shoppingList = new Order[0];

    // adresse p√• server
    private string serverUrl = "http://localhost:5144";
    
    protected override async Task OnInitializedAsync()
    {
        shoppingList = await Http.GetFromJsonAsync<Order[]>($"{serverUrl}/api/shopping/getall");
    }

    public async Task HandleValidSubmit()
    {
        await AddShoppingItem();
    }

    private async Task AddShoppingItem()
    {
        await Http.PostAsJsonAsync<Order>($"{serverUrl}/api/shopping/add", shoppingItem);
        Console.WriteLine("Klient: add " + shoppingItem.Name + " " + shoppingItem.Price);
        shoppingList = await Http.GetFromJsonAsync<Order[]>($"{serverUrl}/api/shopping/getall");
        shoppingItem = new(); // clear fields in form
    }
    
    private async Task DeleteShoppingItem(Order item)
    {
        await Http.DeleteAsync($"{serverUrl}/api/shopping/delete/{item.Id}");

        shoppingList = await Http.GetFromJsonAsync<Order[]>($"{serverUrl}/api/shopping/getall");
    }

}

