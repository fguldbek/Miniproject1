@page "/CreatePost"
@using Core;
@using Miniproject1.Service
@inject HttpClient Http;
@inject NavigationManager navigationManager
@inject ILoginService LoginService 
@inject NavigationManager navManager
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage
@using Miniproject1.Components

<h2>Create a post - easy and simple </h2>

@if (!string.IsNullOrEmpty(userMessage))
{
<div class="alert alert-info" role="alert">
    @userMessage
</div>
}


<EditForm Model="@shoppingItem" class="row p-3" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-md-12 mb-3">
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="shoppingItem.Name" class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="Price">Price</label>
        <InputNumber id="Price" @bind-Value="shoppingItem.Price" class="form-control" />
    </div>
    
    <div class="col-md-12 mb-3">
        <label for="Description">Description</label>
        <InputTextArea id="Description" @bind-Value="shoppingItem.Description" class="form-control" />
    </div>
    
    <div class="col-md-12 mb-3">
        <label for="Category">Category</label>
        <select id="Category" @bind="shoppingItem.Category" class="form-control">
            @foreach(var cat in CategoryOptions)
            {
                <option value="@cat">@cat</option>
            }
        </select>
    </div>
    
    <div class="col-md-12 mb-3">
        <label for="Room">Room</label>
        <select id="Room" @bind="shoppingItem.Room" class="form-control">
            @foreach(var room in RoomOptions)
            {
                <option value="@room">@room</option>
            }
        </select>
    </div>
    
    <div class="col-md-12 mb-3">
        <label for="ImageUpload" class="btn btn-primary">
            Upload Image
            <InputFile id="ImageUpload" OnChange="HandleFileSelected" class="d-none" />
        </label>
    </div>


    <div class="col-12 mb-3">
        <button type="submit" class="btn btn-primary">Create the post!</button>
    </div>
</EditForm>



@code {
    private List<string> CategoryOptions = new List<string> { "Clothing", "Electronics", "Furniture", "Plants", "Animals", "Food", "Cars", "Books", "Other"}; 
    private List<string> RoomOptions = new List<string> { "Room 12", "Room 74", "Room 102", "Room 132"};

    private Order shoppingItem = new();
    private Order[]? shoppingList = new Order[0];
    private string serverUrl = "http://localhost:5145";
    private string userMessage = ""; // Holds the message to display

    
    
    
    public int? UserId;
    private bool isLoggedIn = false;

    public async Task GetUserId()
    {
        var user = await localStorage.GetItemAsync<User>("user");
        if (user != null)
        {
            UserId = user.UserId;
            isLoggedIn = true;
            Console.WriteLine($"User found: UserId = {UserId}");
        }
        else
        {
            UserId = null;
            isLoggedIn = false;
            Console.WriteLine("User not found in localStorage");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await LoginService.GetUserLoggedIn();
        if (user == null)
        {
            navManager.NavigateTo("login/CreatePost");
        }

        await GetUserId();
        shoppingList = await Http.GetFromJsonAsync<Order[]>($"{serverUrl}/api/shopping/getall/");
    }

    public async Task HandleValidSubmit()
    {   
        userMessage = "You made a post";
        await ShowMessageAsync(userMessage);

        await AddShoppingItem();

    }

    private async Task AddShoppingItem()
    {
        Console.WriteLine($"UserId: {UserId}");
        shoppingItem.UserId = UserId ?? 0;
        Console.WriteLine($"Shopping Item: {shoppingItem.Name}, UserId: {shoppingItem.UserId}");

        await Http.PostAsJsonAsync<Order>($"{serverUrl}/api/shopping/add", shoppingItem);

        shoppingList = await Http.GetFromJsonAsync<Order[]>($"{serverUrl}/api/shopping/getall");
        shoppingItem = new();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            using (var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024))
            {
                await stream.ReadAsync(buffer, 0, (int)file.Size);
            }
            shoppingItem.ImageUrl = Convert.ToBase64String(buffer);
        }
    }

    private async Task DeleteShoppingItem(Order item)
    {
        await Http.DeleteAsync($"{serverUrl}/api/shopping/delete/{item.Id}");
        shoppingList = await Http.GetFromJsonAsync<Order[]>($"{serverUrl}/api/shopping/getall");
    }
    
    private async Task ShowMessageAsync(string message)
    {
        userMessage = message;
        await Task.Delay(800); // Show the message for 3 seconds
        userMessage = ""; // Clear the message
    }

}
