@using Core;
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage
@inject HttpClient Http;

@if (orders == null)
{
    <p>Loading Posts...</p>
}
else
{
    <div class="mb-3">
        <label for="categorySelect" style="font-weight: bold; font-size: 1.1rem;">Select Category:</label>
        <select id="categorySelect" class="form-control" @onchange="OnCategoryChanged" style="border-radius: 5px; padding: 10px; width: 100%; max-width: 300px; margin-bottom: 20px;">
            <option value="">All Categories</option> 
            @foreach (var category in availableCategories)
            {
                <option value="@category">@category</option>
            }
        </select>

        <div style="display: flex; gap: 10px; margin-bottom: 20px;">
            <button class="btn" @onclick="SortByPriceDescending" style="flex: 1; padding: 10px 20px; font-size: 1rem; border-radius: 5px; background-color: @(isDescending ? "#6495ED" : "#6c757d"); color: white; border: none;">
                Sort by Price (High to Low)
            </button>
            <button class="btn" @onclick="SortByPriceAscending" style="flex: 1; padding: 10px 20px; font-size: 1rem; border-radius: 5px; background-color: @(isAscending ? "#6495ED" : "#6c757d"); color: white; border: none;">
                Sort by Price (Low to High)
            </button>
        </div>
    </div>

    <div class="row" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px;">

        @if (isActive = true)
        {
            @foreach (var order in filteredOrders)
            {
                <div class="card" style="display: flex; flex-direction: column; height: 450px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
                    @if (!string.IsNullOrEmpty(order.ImageUrl))
                    {
                        <img src="data:image/jpeg;base64,@order.ImageUrl" alt="Order image" style="width: 100%; height: 200px; object-fit: cover; object-position: center; border-top-left-radius: 10px; border-top-right-radius: 10px;"/>
                    }
                    <div class="card-body" style="flex-grow: 1; background-color: #f9f9f9; border-bottom-left-radius: 10px; border-bottom-right-radius: 10px; overflow: hidden;">
                        <h5 class="card-title" style="font-size: 1.2rem; font-weight: bold; color: #333; margin-bottom: 10px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@order.Name</h5>
                        <p class="card-text" style="font-size: 1rem; color: #555; line-height: 1.5; overflow: hidden; text-overflow: ellipsis; max-height: 120px;">
                            <strong>Amount:</strong> @order.Amount<br/>
                            <strong>Price:</strong> $@order.Price<br/>
                            <strong>Status:</strong> @order.Status<br/>
                            <strong>Category:</strong> @order.Category<br/>
                            <strong>Description:</strong> @order.Description<br/>
                            <strong>Room:</strong> @order.Room
                        </p>
                        <button class="btn btn-primary me-2" @onclick="() => StartEdit(order)">Edit</button>
                        <button class="btn btn-primary me-2" @onclick="() => Delete(order.Id)">Delete</button>
                        

                    </div>
                </div>
            }
            
        }
         
        

    </div>
}

@if (isEditing && editingOrder != null)
{
<EditForm Model="editingOrder" OnValidSubmit="HandleEditSubmit" class="p-4 mb-4" style="border: 1px solid #ccc; border-radius: 10px; background-color: #f9f9f9;">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="mb-3">
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="editingOrder.Name" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="Amount">Amount</label>
        <InputNumber id="Amount" @bind-Value="editingOrder.Amount" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="Price">Price</label>
        <InputNumber id="Price" @bind-Value="editingOrder.Price" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="Description">Description</label>
        <InputText id="Description" @bind-Value="editingOrder.Description" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="Category">Category</label>
        <select id="Category" @bind="editingOrder.Category" class="form-control">
            @foreach (var category in availableCategories)
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label for="Room">Room</label>
        <select id="Room" @bind="editingOrder.Room" class="form-control">
            <option value="Room 12">Room 12</option>
            <option value="Room 74">Room 74</option>
            <option value="Room 102">Room 102</option>
            <option value="Room 132">Room 132</option>
        </select>
    </div>
    <div class="mb-3">
        <label for="ImageUrl">Image URL</label>
        <InputText id="ImageUrl" @bind-Value="editingOrder.ImageUrl" class="form-control" placeholder="Enter image URL" />
    </div>

    <button type="submit" class="btn btn-success">Save</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
</EditForm>
}

@code {
    private Order[]? orders; 
    private Order[] filteredOrders;
    private List<string> availableCategories = new List<string>(); 
    private string selectedCategory = "";
    private bool isAscending = false; 
    private bool isDescending = false; 
    private Order? editingOrder; 
    private bool isEditing = false; 
    private bool isActive = true; 
    private string serverUrl = "http://localhost:5145"; 
    
    
    public int? UserId;

    public async Task GetUserId()
    {
        var user = await localStorage.GetItemAsync<User>("user");
        if (user != null)
        {
            UserId = user.UserId;
            Console.WriteLine($"User found: UserId = {UserId}");
        }
        else
        {
            UserId = null;
            Console.WriteLine("User not found in localStorage");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserId();
        orders = await Http.GetFromJsonAsync<Order[]>($"{serverUrl}/api/shopping/GetAllByUserId/{UserId}");
        availableCategories = orders?.Select(order => order.Category).Distinct().ToList() ?? new List<string>();

        if (orders != null)
        {
            orders = orders.Reverse().ToArray();
            filteredOrders = orders; 
        }
    }

    private void OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString() ?? "";
        FilterOrders();
    }

    private void SortByPriceDescending()
    {
        isDescending = true;
        isAscending = false;
        filteredOrders = filteredOrders.OrderByDescending(order => order.Price).ToArray();
    }

    private void SortByPriceAscending()
    {
        isDescending = false;
        isAscending = true;
        filteredOrders = filteredOrders.OrderBy(order => order.Price).ToArray();
    }

    private void FilterOrders()
    {
        if (string.IsNullOrEmpty(selectedCategory))
        {
            filteredOrders = orders; 
        }
        else
        {
            filteredOrders = orders?.Where(order => order.Category == selectedCategory).ToArray();
        }
    }

    private void StartEdit(Order order)
    {
        editingOrder = new Order
        {
            Id = order.Id,
            Name = order.Name,
            Amount = order.Amount,
            Price = order.Price,
            Description = order.Description,
            Category = order.Category,
            Room = order.Room,
            ImageUrl = order.ImageUrl // Include the ImageUrl in the edit model
        };
        isEditing = true;
    }

    private async Task HandleEditSubmit()
    {
        if (editingOrder != null)
        {
            var response = await Http.PutAsJsonAsync($"{serverUrl}/api/shopping/update", editingOrder);
            if (response.IsSuccessStatusCode)
            {
                var index = Array.FindIndex(orders, o => o.Id == editingOrder.Id);
                if (index >= 0)
                {
                    orders[index] = editingOrder;
                    FilterOrders();
                }
                isEditing = false;
                editingOrder = null;
            }
            else
            {
                Console.WriteLine("Failed to update the order.");
            }
        }
    }

    private async Task Delete(int id)
    {
        var response = await Http.DeleteAsync($"{serverUrl}/api/shopping/delete/{id}");
        isActive = false;

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine($"Item with ID {id} deleted successfully.");
            // Remove the deleted item from the UI
            orders = orders?.Where(order => order.Id != id).ToArray();
            FilterOrders(); // Refresh the filtered list based on current filt
        }
        else
        {
            Console.WriteLine($"Failed to delete item. Status code: {response.StatusCode}");
        }
    }



    private void CancelEdit()
    {
        isEditing = false;
        editingOrder = null;
    }
}
