@using Core;
@inject HttpClient Http;

@if (orders == null)
{
    <p>Loading orders...</p>
}
else
{
    <div class="row">
        @foreach (var order in orders)
        {
            <div class="col-md-4 mb-4">
                <div class="card" style="display: flex; flex-direction: column; height: 400px;">
                    @if (!string.IsNullOrEmpty(order.ImageUrl))
                    {
                        <!-- Styling -->
                        <img src="data:image/jpeg;base64,@order.ImageUrl" alt="Order image"
                             style="width: 100%; height: 200px; object-fit: cover; object-position: center; border-top-left-radius: 0.25rem; border-top-right-radius: 0.25rem;" />
                    }
                    <div class="card-body" style="padding: 1rem; flex-grow: 1;">
                        <h5 class="card-title">@order.Name</h5>
                        <p class="card-text">
                            <strong>Amount:</strong> @order.Amount<br />
                            <strong>Price:</strong> $@order.Price<br />
                            <strong>Status:</strong> @order.Status<br />
                            <strong>Category:</strong> @order.Category<br />
                            <strong>Room:</strong> @order.Room
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private Order[]? orders;

    private string serverUrl = "http://localhost:5145"; // URL til API-serveren

    protected override async Task OnInitializedAsync()
    {
        // Henter alle ordrer fra API
        orders = await Http.GetFromJsonAsync<Order[]>($"{serverUrl}/api/shopping/getall");

        // Omvendt rækkefølge
        if (orders != null)
        {
            orders = orders.Reverse().ToArray();  // This reverses the order so the newest is at the top
        }
    }
}